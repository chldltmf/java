java란??
- Java는 원래 Sun Microsystems에서 개발하여 1995년에 출시한 인기 있는 고급 클래스 기반 객체 지향 프로그래밍 언어
- 현재 Java는 Oracle이 소유하고 있으며 30억 개 이상의 장치에서 Java를 실행
- Java는 Windows, Mac OS 및 다양한 버전의 UNIX와 같은 다양한 플랫폼에서 실행.
- Java는 모바일 앱, 웹 앱, 데스크톱 앱, 게임 등을 개발하는 데 사용됩니다.
- Java는 프로그래머가 WORA(한 번만 작성하면 어디에서나 실행할 수 있음)를 허용하는 범용 프로그래밍 언어.
       ->  즉, 컴파일된 Java 코드는 재컴파일할 필요 없이 Java를 지원하는 모든 플랫폼에서 실행 가능

Java
* 객체 지향(Object Oriented ) : Java에서는 모든 것이 객체입니다. Java는 Object 모델을 기반으로 하기 때문에 쉽게 확장할 수 있습니다.
* 플랫폼 독립적(Platform Independent ) : C 및 C++를 포함한 다른 많은 프로그래밍 언어와 달리 Java가 컴파일될 때 플랫폼 특정 시스템으로 컴파일되지 않고 플랫폼 독립적인 바이트 코드로 컴파일됩니다. 이 바이트 코드는 웹을 통해 배포되고 실행되는 플랫폼에 관계없이 가상 머신(JVM)에 의해 해석됩니다.
* Simple : Java는 배우기 쉽도록 설계되었습니다. OOP Java의 기본 개념을 이해하면 쉽게 마스터할 수 있습니다.
* 보안(Secure) : Java의 보안 기능을 통해 바이러스와 변조가 없는 시스템을 개발할 수 있습니다. 인증 기술은 공개 키 암호화를 기반으로 합니다.
* Architecture-neutral : Java 컴파일러는 Java 런타임 시스템이 있는 상태에서 많은 프로세서에서 컴파일된 코드를 실행할 수 있도록 하는 아키텍처 중립적 개체 파일 형식을 생성합니다.
* 이식성(Portable) : 아키텍처 중립적이고 사양의 구현 종속적인 측면이 없기 때문에 Java를 이식할 수 있습니다 . Java의 컴파일러는 POSIX 하위 집합인 깨끗한 이식성 경계와 함께 ANSI C로 작성되었습니다.
* Robust : Java는 주로 컴파일 시간 오류 검사 및 런타임 검사를 강조하여 오류가 발생하기 쉬운 상황을 제거하기 위해 노력합니다.
* 다중 스레드(Multithreaded) : Java의 다중 스레드 기능을 사용하면 동시에 많은 작업을 수행할 수 있는 프로그램을 작성할 수 있습니다. 이 디자인 기능을 통해 개발자는 원활하게 실행할 수 있는 대화형 응용 프로그램을 구성할 수 있습니다.
* 해석 됨(Interpreted) - Java 바이트 코드는 기본 기계 명령어로 즉시 변환되며 어디에도 저장되지 않습니다. 링크가 점진적이고 가벼운 프로세스이기 때문에 개발 프로세스가 더 빠르고 분석적입니다.
* 고성능(High Performance) - Just-In-Time 컴파일러를 사용하여 Java는 고성능을 가능하게 합니다.
* Distributed - Java는 인터넷의 분산 환경을 위해 설계되었습니다.
* Dynamic - Java는 진화하는 환경에 적응하도록 설계되었기 때문에 C 또는 C++보다 더 동적으로 간주됩니다. Java 프로그램은 런타임에 개체에 대한 액세스를 확인하고 해결하는 데 사용할 수 있는 방대한 양의 런타임 정보를 전달할 수 있습니다.

참조 : https://www.tutorialspoint.com/java/java_overview.htm
